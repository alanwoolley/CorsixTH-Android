import com.android.build.gradle.internal.lint.AndroidLintAnalysisTask
import com.android.build.gradle.internal.lint.AndroidLintTask
import com.android.build.gradle.tasks.MergeSourceSetFolders

buildscript {
    ext.kotlin_version = '1.8.21'
    ext.anko_version = '0.10.4'

    repositories {
        mavenCentral()
        jcenter()
        google()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.15'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.8'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: 'versioning.gradle'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

repositories {
    jcenter()
    google()
    mavenCentral()
    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
}
dependencies {
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'commons-io:commons-io:2.12.0'
    implementation("com.google.guava:guava:32.0.0-android")
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation "com.lazygeniouz:dfc:1.0.7"
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'
    implementation 'uk.co.armedpineapple.innoextract:service:2.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.github.bumptech.glide:glide:4.15.1'

    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.4.0'
    implementation 'com.google.firebase:firebase-analytics-ktx:21.3.0'

    def room_version = "2.5.2"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
}

android {
    compileSdkVersion 34

    namespace 'uk.co.armedpineapple.cth'
    defaultConfig {
        minSdkVersion 27
        targetSdkVersion 34

        versionName = project.ext.buildVersion
        versionCode = project.ext.offsetBuildVersionCode
    }

    compileOptions {
        sourceCompatibility = 18
        targetCompatibility = 18
    }

    signingConfigs {
        if (System.getenv('RELEASE_STORE_FILE') != null) {
            release {
                storeFile file(System.getenv("RELEASE_STORE_FILE"))
                storePassword System.getenv("RELEASE_STORE_PASSWORD")
                keyAlias System.getenv("RELEASE_KEY_ALIAS")
                keyPassword System.getenv("RELEASE_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "ALWAYS_UPGRADE", "false"
            if (System.getenv('RELEASE_STORE_FILE') != null) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }

        debug {
            buildConfigField "boolean", "ALWAYS_UPGRADE", "true"
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/Java', 'jni/SDL/android-project/app/src/main/java']
            resources.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
                .dependsOn(createGameZip)
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }
    aaptOptions {
        noCompress "zip"
    }
}


task saveVersion {
    new File(projectDir, "version.txt").text = project.ext.buildVersion
}

preBuild.dependsOn(saveVersion)

// Create ZIP of CorsixTH game assets
task createGameZip(type: Zip) {

    destinationDirectory = file('assets')
    archiveFileName = 'game.zip'

    from('jni/src/CorsixTH') {
        include 'Levels/**'
        include 'Campaigns/**'
        include 'Lua/**'
        include 'CorsixTH.lua'
        include 'Bitmap/**'
        include 'Campaigns/**'
        include 'Graphics/**'
    }
}
